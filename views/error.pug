doctype html(lang='en')
head
  meta(charset='utf-8')
  meta(name='viewport', content='width=device-width, initial-scale=1, shrink-to-fit=no')
  meta(http-equiv='x-ua-compatible', content='ie=edge')
  title De(c)ypher &middot; #{title}
  //- link(rel='stylesheet', href='https://transcendent-cocada-cde0ba.netlify.app/css/style.css')
  link(rel='icon', type='image/png' href='https://transcendent-cocada-cde0ba.netlify.app/img/icon.png')
  meta(name='theme-color', content='#f5f5f5')
  style.
    @import url(https://fonts.googleapis.com/css2?family=Chakra+Petch&display=swap);@import url(https://fonts.googleapis.com/css2?family=Comfortaa&display=swap);@import url(https://fonts.googleapis.com/css2?family=Poppins&display=swap);header > *{-webkit-tap-highlight-color:transparent;-webkit-tap-highlight-color:transparent;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}*,:after,:before{-moz-box-sizing:border-box;box-sizing:border-box;-webkit-box-sizing:border-box}body{text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;line-height:1.5;font-family:'Chakra Petch',sans-serif;margin:0;height:100%;min-height:100%;color:#fff;background:#050b18;letter-spacing:.1em;cursor:default;overflow-x:scroll}::-webkit-scrollbar{width:4px;height:0}::-webkit-scrollbar-track{background:#03070e}::-webkit-scrollbar-thumb{background:linear-gradient(to bottom,#ff2079,#41e7fe);border-radius:30px;opacity:.8}.temp-body{opacity:.05;transition:all .2s ease-in-out}::selection{background:#ee448e;color:#fff}a{cursor:pointer}.column,.columns,.container{width:100%;-moz-box-sizing:border-box;box-sizing:border-box}.container{position:relative;width:100%;margin:0 auto}.column,.columns{float:left}.container:after,.row:after{content:'';display:table;clear:both}a{color:inherit;text-decoration:none}a:hover{color:#e309a2}.left{text-align:left}.right{text-align:right}.center{text-align:center}h2.center{font-family:'Chakra Petch',sans-serif;font-size:20px;margin-top:40px}footer h2{background:linear-gradient(to bottom,#43e3fe,#f11d7a);background-clip:text;-webkit-background-clip:text;color:transparent}.float-right{float:right}p.error{margin:-15px 0 20px 0;text-align:center;font-weight:700;color:#d41d76}footer,header{background:#050b18;line-height:50px;box-shadow:0 0 1px 0 rgba(0,0,0,.1)}header{height:50px}footer{height:max-content;background:#030711;margin-top:10vh}.separator{height:3px;width:100%;background-image:linear-gradient(to right,#2473e9,#d41d76)}.card{width:620px;max-width:100%;background:#030711;box-shadow:1px 2px 1px 0 rgba(0,0,0,.05);margin:60px auto;padding:4%;font-family:Comfortaa,cursive}.animated-box,.animated-box2,.animated-box3,.animated-box4{position:relative;width:60%}.animated-box2{margin:auto;width:fit-content;height:90vh}.animated-box3{margin:inherit;width:inherit}.animated-box4{width:40%}.animated-box2:after,.animated-box3:after,.animated-box4:after,.animated-box:after{content:'';position:absolute;top:0;left:0;right:0;bottom:0;border-radius:4px;background:linear-gradient(120deg,#f11d7a,#43e3fe,#f11d7a,#43e3fe);background-size:300% 300%}.animated-box:after{clip-path:polygon(0 100%,3px 100%,3px 3px,calc(100% - 3px) 3px,calc(100% - 3px) calc(100% - 3px),3px calc(100% - 3px),3px 100%,100% 100%,100% 0,0 0)}.animated-box2:after{clip-path:polygon(0 100%,1px 100%,1px 1px,calc(100% - 1px) 1px,calc(100% - 1px) calc(100% - 1px),1px calc(100% - 1px),1px 100%,100% 100%,100% 0,0 0)}.animated-box3:after{clip-path:polygon(0 100%,2px 100%,2px 2px,calc(100% - 2px) 2px,calc(100% - 2px) calc(100% - 2px),2px calc(100% - 2px),2px 100%,100% 100%,100% 0,0 0)}.animated-box4:after{clip-path:polygon(0 100%,1px 100%,1px 1px,calc(100% - 1px) 1px,calc(100% - 1px) calc(100% - 1px),1px calc(100% - 1px),1px 100%,100% 100%,100% 0,0 0)}.animated-box.in:after,.animated-box2.in:after,.animated-box3.in:after,.animated-box4.in:after{animation:gradient-animation 8s ease-in-out infinite}@keyframes gradient-animation{0%{background-position:15% 0}50%{background-position:85% 100%}100%{background-position:15% 0}}@keyframes gradient-animation2{0%{background-position:0 0}50%{background-position:100% 100%}100%{background-position:0 0}}#myInput:focus,.animated-box textarea:focus{outline:0}.card h1.form-title{text-align:center;font-size:2em;margin-top:0;text-align:left;font-weight:700}.card h1.error{margin-bottom:0}h1.title{margin-top:20vh;text-align:center;font-size:3em}p.credits{text-align:center;color:#aaa;margin:-30px 0 0 0}form{margin:0;padding:0}form .form-group{margin-bottom:20px}form label{text-align:left;font-weight:700;margin-bottom:5px;display:block;font-family:Poppins,sans-serif;margin-top:2em}form input,select,textarea{display:block;width:100%;font-size:1em;border:1px solid #fff;height:48px;padding:6px 10px;border-radius:5px;box-shadow:none;box-sizing:border-box;margin-bottom:5px;background:#050b18;-webkit-appearance:none;color:#fff;font-family:Poppins,sans-serif;margin-top:1em}form input:focus,form textarea:focus,select:focus{outline:0}input:focus::-webkit-input-placeholder{color:#050b18}input[type=email],input[type=password],input[type=text]{padding:12px 16px;background-repeat:no-repeat;text-indent:35px;background-position:10px 10px}form input[type=submit]{background:linear-gradient(to right,#43e3fe,#f11d7a);border:none;color:#fff;font-size:1em;letter-spacing:1px;font-weight:700;margin-bottom:0;margin-top:3em;align-items:center}form input[type=submit]:hover{background:linear-gradient(to right,#a1effd,#fa8fbe)}input::-webkit-inner-spin-button,input::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.mob-logo{display:none}img.footer-logo{margin:1rem 1rem 4rem 1rem}img.footer-logo:hover{background-color:#dcdcdc;filter:invert(100%)}.gol{padding:13px;border-radius:100%;border-color:#000;height:60px;width:60px}.gol.fb{border-radius:20%}#img1{filter:invert(100%)}.previous{font-size:50px;margin:0 auto;text-align:center}
    .main{display:flex;flex-flow:column;align-items:center;justify-content:center;width:100%;height:100vh}.main h1{font-size:6em;font-weight:bolder;transform:scale(2);text-transform:uppercase}.glitch{position:relative;color:#fff;mix-blend-mode:lighten}.glitch:after,.glitch:before{content:attr(data-text);position:absolute;top:0;width:100%;clip:rect(0,0,0,0)}.glitch:before{left:-4px;text-shadow:6px 0 #e91e63;text-shadow:4px 0 #e91e63;animation:glitch-anim-1 .4s infinite ease-in-out alternate-reverse}.glitch:after{left:4px;text-shadow:-3px 0 #46ddfd;text-shadow:-5px 0 #46ddfd;animation:glitch-anim-2 .3s infinite ease-in-out alternate-reverse}@keyframes glitch-anim-1{0%{clip:rect(30px,9999px,10px,0)}25%{clip:rect(15px,9999px,100px,0)}50%{clip:rect(50px,9999px,105px,0)}75%{clip:rect(2px,9999px,80px,0)}100%{clip:rect(90px,9999px,100px,0)}}@keyframes glitch-anim-2{0%{top:-1px;left:50px;clip:rect(65px,9999px,119px,0)}25%{top:-10px;left:1px;clip:rect(79px,9999px,19px,0)}50%{top:-7px;left:20px;clip:rect(65px,9999px,11px,0)}75%{top:10px;right:20px;left:-50px;clip:rect(95px,9999px,53px,0)}100%{top:-5px;left:-7px;clip:rect(31px,9999px,149px,0)}}
    .desktop-nav ul{list-style:none;margin:0;padding-left:0;padding-top:10px;padding-right:15px}.desktop-nav ul li{display:inline-block;list-style:none}.desktop-nav ul li a{color:inherit;height:50px;display:block;border:none;text-decoration:none;font-weight:700;font-size:1.3em;margin-right:2em}.desktop-nav ul li a:hover{color:#e309a2}#nav.mobile-nav{margin:auto;font-size:34px;width:100vw;height:100vh;margin-top:120px}.mobile-nav ul{padding:0 50px 50px 50px;margin:auto;list-style-type:none;padding-bottom:90px}.mobile-nav ul li{display:flex;align-items:center;justify-content:center;padding-top:80px}.mobile-nav ul li a{text-align:center}.hidden{display:none}.notHidden{display:block}.mobile-nav ul.animated-box4.in{height:max-content;width:max-content;background:#030711}.hamburger-menu{display:none;height:100px;padding:35px 10px;transition:all .4s ease-in-out}.hamburger-menu:hover{cursor:pointer}.hamburger-menu .menu-item{display:block;height:2px;margin:0 0 7px;transition:all .3s ease-in-out;background-image:linear-gradient(to bottom right,#42e6ff,#f11d7a);background-size:100px;width:30px}.hamburger-menu.open .menu-item{margin:0 0 5px}.hamburger-menu .menu-item:nth-child(2),.hamburger-menu .menu-item:nth-child(3){background-position-y:50px}.hamburger-menu.open .menu-item:first-child{transform:rotate(45deg);transform-origin:6px}.hamburger-menu.open .menu-item:nth-child(2){opacity:0}.hamburger-menu.open .menu-item:nth-child(3){transform:rotate(-45deg);transform-origin:4px}.active{background-image:linear-gradient(to right,#42e6ff 0,#f11d7a 100%);background-size:40px 2px;background-position-y:40px;background-repeat:no-repeat}
    @media (min-width:750px){.container{width:100%}.column,.columns{margin-left:4%}.column:first-child,.columns:first-child{margin-left:0}.one.column,.one.columns{width:4.66666666667%}.two.columns{width:13.3333333333%}.three.columns{width:22%}.four.columns{width:30.6666666667%}.five.columns{width:39.3333333333%}.six.columns{width:48%}.seven.columns{width:56.6666666667%}.eight.columns{width:65.3333333333%}.nine.columns{width:74%}.ten.columns{width:82.6666666667%}.eleven.columns{width:91.3333333333%}.twelve.columns{width:100%;margin-left:0}}@media (min-width:500px){.sphere path{stroke-width:.4px}}@media (max-width:750px){header{padding-top:0;height:6vh}nav{height:100vh;padding:10px 2.5px;position:absolute;left:0;right:0;top:0;white-space:nowrap;text-align:left;z-index:9000;font-size:10px}.desktop-nav{display:none}.hamburger-menu{display:inline-block;margin-right:25px}.mob-logo{position:absolute;max-height:80px;left:0;margin-top:16px;margin-left:10px;display:inline-block}section#main{margin-top:60px}p.credits{font-size:.8em}footer nav li a,header nav li a{height:30px!important;line-height:30px!important}header .left{display:none}header a.active{background:0 0}.simplebar-track.simplebar-vertical{width:5px;right:0}.card{width:92vw;padding:40px;top:10vh}.card h1.form-title{font-size:1.1em}.card p{font-size:.6em;margin-top:10px}.card label{font-size:.8em}.card input{font-size:.8em;height:40px;background-position:6px 6px;text-indent:28px}.card input[type=submit]{text-indent:0}.card.question-card{width:400px;padding:40px}.card.question-card p{font-size:1em}h1.title{font-size:2em}.animated-box3.play-page{margin:auto;margin-top:50px}.card.question-card input{text-indent:0}h1.center{font-size:1.5em;margin-top:10px}#rules.card ul{margin-top:-25px}#rules.card li{font-size:10px;margin-left:-25px}#rules.card{height:fit-content;width:92vw;padding:40px}.card.leaderboard{width:92vw;padding-top:8vh}.card.leaderboard #leader{font-size:2em}.flex{padding-top:3vh;display:block}.flex img{height:50px;width:50px}.arrow{float:right;width:100%;right:0}.arrows{margin:auto;margin-top:20px;width:100%}.arrow:nth-child(1){margin-right:50px}.arrow:nth-child(2){margin-right:10px}#myInput{font-size:.8em;height:40px;background-position:10px 12px;text-indent:18px;background-size:15px 15px}.animated-box.in{margin:auto;height:40px;width:90%}.animated-box:after{clip-path:polygon(0 100%,2px 100%,2px 2px,calc(100% - 2px) 2px,calc(100% - 2px) calc(100% - 2px),2px calc(100% - 2px),2px 100%,100% 100%,100% 0,0 0)}#myTable{padding:20px;padding-top:90px}.card.leaderboard table th{font-size:1.2em}.card.leaderboard table td{font-size:1em}}@media (min-width:750px) and (max-width:1112px){.desktop-nav{display:none}.hamburger-menu{display:inline-block}nav{z-index:9000}#nav.mobile-nav{position:absolute}.mob-logo{position:absolute;max-height:100px;height:80px;left:0;top:0;margin-left:50px;display:inline-block;margin-top:16px}header{height:15vh}.handletter{display:none}.eight.columns{width:90%}.eight.columns.right{top:0}.card{width:70vw;padding:80px}h1.center{font-size:2em;margin-top:20px}#rules.card li{font-size:14px;margin-left:-25px}#rules.card{height:fit-content}}@media (max-width:1200px){#youfunction{display:none;}}

  if isLogs
    meta(http-equiv="refresh" content="20;url=/admin/logs")
body

  
  include header
  
  section#main
    .container
      .main
        h1.glitch(data-text='404') 404
        a(href='javascript:window.history.back();') Go back
  script(src='https://transcendent-cocada-cde0ba.netlify.app/js/built.js')
  script.
    var Input = {
      keys: [],
      mouse: {
        left: false,
        right: false,
        middle: false,
        x: 0,
        y: 0
      }
    };
    for (var i = 0; i < 230; i++) {
      Input.keys.push(false);
    }
    document.addEventListener("keydown", function(event) {
      Input.keys[event.keyCode] = true;
    });
    document.addEventListener("keyup", function(event) {
      Input.keys[event.keyCode] = false;
    });
    document.addEventListener("mousedown", function(event) {
      if ((event.button = 0)) {
        Input.mouse.left = true;
      }
      if ((event.button = 1)) {
        Input.mouse.middle = true;
      }
      if ((event.button = 2)) {
        Input.mouse.right = true;
      }
    });
    document.addEventListener("mouseup", function(event) {
      if ((event.button = 0)) {
        Input.mouse.left = false;
      }
      if ((event.button = 1)) {
        Input.mouse.middle = false;
      }
      if ((event.button = 2)) {
        Input.mouse.right = false;
      }
    });
    document.addEventListener("mousemove", function(event) {
      Input.mouse.x = event.clientX;
      Input.mouse.y = event.clientY;
    });
    //Sets up canvas
    var canvas = document.createElement("canvas");
    document.body.appendChild(canvas);
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    canvas.style.position = "absolute";
    canvas.style.left = "0px";
    canvas.style.top = "0px";
    document.body.style.overflow = "hidden";
    var ctx = canvas.getContext("2d");
    //Necessary classes
    var segmentCount = 0;
    class Segment {
      constructor(parent, size, angle, range, stiffness) {
        segmentCount++;
        this.isSegment = true;
        this.parent = parent; //Segment which this one is connected to
        if (typeof parent.children == "object") {
          parent.children.push(this);
        }
        this.children = []; //Segments connected to this segment
        this.size = size; //Distance from parent
        this.relAngle = angle; //Angle relative to parent
        this.defAngle = angle; //Default angle relative to parent
        this.absAngle = parent.absAngle + angle; //Angle relative to x-axis
        this.range = range; //Difference between maximum and minimum angles
        this.stiffness = stiffness; //How closely it conforms to default angle
        this.updateRelative(false, true);
      }
      updateRelative(iter, flex) {
        this.relAngle =
          this.relAngle -
          2 *
            Math.PI *
            Math.floor((this.relAngle - this.defAngle) / 2 / Math.PI + 1 / 2);
        if (flex) {
          //		this.relAngle=this.range/
          //				(1+Math.exp(-4*(this.relAngle-this.defAngle)/
          //				(this.stiffness*this.range)))
          //			  -this.range/2+this.defAngle;
          this.relAngle = Math.min(
            this.defAngle + this.range / 2,
            Math.max(
              this.defAngle - this.range / 2,
              (this.relAngle - this.defAngle) / this.stiffness + this.defAngle
            )
          );
        }
        this.absAngle = this.parent.absAngle + this.relAngle;
        this.x = this.parent.x + Math.cos(this.absAngle) * this.size; //Position
        this.y = this.parent.y + Math.sin(this.absAngle) * this.size; //Position
        if (iter) {
          for (var i = 0; i < this.children.length; i++) {
            this.children[i].updateRelative(iter, flex);
          }
        }
      }
      draw(iter) {
        ctx.beginPath();
        ctx.moveTo(this.parent.x, this.parent.y);
        ctx.lineTo(this.x, this.y);
        ctx.stroke();
        if (iter) {
          for (var i = 0; i < this.children.length; i++) {
            this.children[i].draw(true);
          }
        }
      }
      follow(iter) {
        var x = this.parent.x;
        var y = this.parent.y;
        var dist = ((this.x - x) ** 2 + (this.y - y) ** 2) ** 0.5;
        this.x = x + this.size * (this.x - x) / dist;
        this.y = y + this.size * (this.y - y) / dist;
        this.absAngle = Math.atan2(this.y - y, this.x - x);
        this.relAngle = this.absAngle - this.parent.absAngle;
        this.updateRelative(false, true);
        //this.draw();
        if (iter) {
          for (var i = 0; i < this.children.length; i++) {
            this.children[i].follow(true);
          }
        }
      }
    }
    class LimbSystem {
      constructor(end, length, speed, creature) {
        this.end = end;
        this.length = Math.max(1, length);
        this.creature = creature;
        this.speed = speed;
        creature.systems.push(this);
        this.nodes = [];
        var node = end;
        for (var i = 0; i < length; i++) {
          this.nodes.unshift(node);
          //node.stiffness=1;
          node = node.parent;
          if (!node.isSegment) {
            this.length = i + 1;
            break;
          }
        }
        this.hip = this.nodes[0].parent;
      }
      moveTo(x, y) {
        this.nodes[0].updateRelative(true, true);
        var dist = ((x - this.end.x) ** 2 + (y - this.end.y) ** 2) ** 0.5;
        var len = Math.max(0, dist - this.speed);
        for (var i = this.nodes.length - 1; i >= 0; i--) {
          var node = this.nodes[i];
          var ang = Math.atan2(node.y - y, node.x - x);
          node.x = x + len * Math.cos(ang);
          node.y = y + len * Math.sin(ang);
          x = node.x;
          y = node.y;
          len = node.size;
        }
        for (var i = 0; i < this.nodes.length; i++) {
          var node = this.nodes[i];
          node.absAngle = Math.atan2(
            node.y - node.parent.y,
            node.x - node.parent.x
          );
          node.relAngle = node.absAngle - node.parent.absAngle;
          for (var ii = 0; ii < node.children.length; ii++) {
            var childNode = node.children[ii];
            if (!this.nodes.includes(childNode)) {
              childNode.updateRelative(true, false);
            }
          }
        }
        //this.nodes[0].updateRelative(true,false)
      }
      update() {
        this.moveTo(Input.mouse.x, Input.mouse.y);
      }
    }
    class LegSystem extends LimbSystem {
      constructor(end, length, speed, creature) {
        super(end, length, speed, creature);
        this.goalX = end.x;
        this.goalY = end.y;
        this.step = 0; //0 stand still, 1 move forward,2 move towards foothold
        this.forwardness = 0;

        //For foot goal placement
        this.reach =
          0.9 *
          ((this.end.x - this.hip.x) ** 2 + (this.end.y - this.hip.y) ** 2) ** 0.5;
        var relAngle =
          this.creature.absAngle -
          Math.atan2(this.end.y - this.hip.y, this.end.x - this.hip.x);
        relAngle -= 2 * Math.PI * Math.floor(relAngle / 2 / Math.PI + 1 / 2);
        this.swing = -relAngle + (2 * (relAngle < 0) - 1) * Math.PI / 2;
        this.swingOffset = this.creature.absAngle - this.hip.absAngle;
        //this.swing*=(2*(relAngle>0)-1);
      }
      update(x, y) {
        this.moveTo(this.goalX, this.goalY);
        //this.nodes[0].follow(true,true)
        if (this.step == 0) {
          var dist =
            ((this.end.x - this.goalX) ** 2 + (this.end.y - this.goalY) ** 2) **
            0.5;
          if (dist > 1) {
            this.step = 1;
            //this.goalX=x;
            //this.goalY=y;
            this.goalX =
              this.hip.x +
              this.reach *
                Math.cos(this.swing + this.hip.absAngle + this.swingOffset) +
              (2 - 1) * this.reach / 2;
            this.goalY =
              this.hip.y +
              this.reach *
                Math.sin(this.swing + this.hip.absAngle + this.swingOffset) +
              (2 - 1) * this.reach / 2;
          }
        } else if (this.step == 1) {
          var theta =
            Math.atan2(this.end.y - this.hip.y, this.end.x - this.hip.x) -
            this.hip.absAngle;
          var dist =
            ((this.end.x - this.hip.x) ** 2 + (this.end.y - this.hip.y) ** 2) **
            0.5;
          var forwardness2 = dist * Math.cos(theta);
          var dF = this.forwardness - forwardness2;
          this.forwardness = forwardness2;
          if (dF * dF < 1) {
            this.step = 0;
            this.goalX = this.hip.x + (this.end.x - this.hip.x);
            this.goalY = this.hip.y + (this.end.y - this.hip.y);
          }
        }
        //	ctx.strokeStyle='blue';
        //	ctx.beginPath();
        //	ctx.moveTo(this.end.x,this.end.y);
        //	ctx.lineTo(this.hip.x+this.reach*Math.cos(this.swing+this.hip.absAngle+this.swingOffset),
        //				this.hip.y+this.reach*Math.sin(this.swing+this.hip.absAngle+this.swingOffset));
        //	ctx.stroke();
        //	ctx.strokeStyle='black';
      }
    }
    class Creature {
      constructor(
        x,
        y,
        angle,
        fAccel,
        fFric,
        fRes,
        fThresh,
        rAccel,
        rFric,
        rRes,
        rThresh
      ) {
        this.x = x; //Starting position
        this.y = y;
        this.absAngle = angle; //Staring angle
        this.fSpeed = 0; //Forward speed
        this.fAccel = fAccel; //Force when moving forward
        this.fFric = fFric; //Friction against forward motion
        this.fRes = fRes; //Resistance to motion
        this.fThresh = fThresh; //minimum distance to target to keep moving forward
        this.rSpeed = 0; //Rotational speed
        this.rAccel = rAccel; //Force when rotating
        this.rFric = rFric; //Friction against rotation
        this.rRes = rRes; //Resistance to rotation
        this.rThresh = rThresh; //Maximum angle difference before rotation
        this.children = [];
        this.systems = [];
      }
      follow(x, y) {
        var dist = ((this.x - x) ** 2 + (this.y - y) ** 2) ** 0.5;
        var angle = Math.atan2(y - this.y, x - this.x);
        //Update forward
        var accel = this.fAccel;
        if (this.systems.length > 0) {
          var sum = 0;
          for (var i = 0; i < this.systems.length; i++) {
            sum += this.systems[i].step == 0;
          }
          accel *= sum / this.systems.length;
        }
        this.fSpeed += accel * (dist > this.fThresh);
        this.fSpeed *= 1 - this.fRes;
        this.speed = Math.max(0, this.fSpeed - this.fFric);
        //Update rotation
        var dif = this.absAngle - angle;
        dif -= 2 * Math.PI * Math.floor(dif / (2 * Math.PI) + 1 / 2);
        if (Math.abs(dif) > this.rThresh && dist > this.fThresh) {
          this.rSpeed -= this.rAccel * (2 * (dif > 0) - 1);
        }
        this.rSpeed *= 1 - this.rRes;
        if (Math.abs(this.rSpeed) > this.rFric) {
          this.rSpeed -= this.rFric * (2 * (this.rSpeed > 0) - 1);
        } else {
          this.rSpeed = 0;
        }

        //Update position
        this.absAngle += this.rSpeed;
        this.absAngle -=
          2 * Math.PI * Math.floor(this.absAngle / (2 * Math.PI) + 1 / 2);
        this.x += this.speed * Math.cos(this.absAngle);
        this.y += this.speed * Math.sin(this.absAngle);
        this.absAngle += Math.PI;
        for (var i = 0; i < this.children.length; i++) {
          this.children[i].follow(true, true);
        }
        for (var i = 0; i < this.systems.length; i++) {
          this.systems[i].update(x, y);
        }
        this.absAngle -= Math.PI;
        this.draw(true);
      }
      draw(iter) {
        var r = 4;
        ctx.beginPath();
        ctx.arc(
          this.x,
          this.y,
          r,
          Math.PI / 4 + this.absAngle,
          7 * Math.PI / 4 + this.absAngle
        );
        ctx.moveTo(
          this.x + r * Math.cos(7 * Math.PI / 4 + this.absAngle),
          this.y + r * Math.sin(7 * Math.PI / 4 + this.absAngle)
        );
        ctx.lineTo(
          this.x + r * Math.cos(this.absAngle) * 2 ** 0.5,
          this.y + r * Math.sin(this.absAngle) * 2 ** 0.5
        );
        ctx.lineTo(
          this.x + r * Math.cos(Math.PI / 4 + this.absAngle),
          this.y + r * Math.sin(Math.PI / 4 + this.absAngle)
        );
        ctx.stroke();
        if (iter) {
          for (var i = 0; i < this.children.length; i++) {
            this.children[i].draw(true);
          }
        }
      }
    }
    //Initializes and animates
    var critter;
    function setupSimple() {
      //(x,y,angle,fAccel,fFric,fRes,fThresh,rAccel,rFric,rRes,rThresh)
      var critter = new Creature(
        window.innerWidth / 2,
        window.innerHeight / 2,
        0,
        12,
        1,
        0.5,
        16,
        0.5,
        0.085,
        0.5,
        0.3
      );
      var node = critter;
      //(parent,size,angle,range,stiffness)
      for (var i = 0; i < 128; i++) {
        var node = new Segment(node, 8, 0, 3.14159 / 2, 1);
      }
      setInterval(function() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        critter.follow(Input.mouse.x, Input.mouse.y);
      }, 33);
    }
    function setupTentacle() {
      //(x,y,angle,fAccel,fFric,fRes,fThresh,rAccel,rFric,rRes,rThresh)
      critter = new Creature(
        window.innerWidth / 2,
        window.innerHeight / 2,
        0,
        12,
        1,
        0.5,
        16,
        0.5,
        0.085,
        0.5,
        0.3
      );
      var node = critter;
      //(parent,size,angle,range,stiffness)
      for (var i = 0; i < 32; i++) {
        var node = new Segment(node, 8, 0, 2, 1);
      }
      //(end,length,speed,creature)
      var tentacle = new LimbSystem(node, 32, 8, critter);
      setInterval(function() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        critter.follow(canvas.width / 2, canvas.height / 2);
        ctx.beginPath();
        ctx.arc(Input.mouse.x, Input.mouse.y, 2, 0, 6.283);
        ctx.fill();
      }, 33);
    }
    function setupArm() {
      //(x,y,angle,fAccel,fFric,fRes,fThresh,rAccel,rFric,rRes,rThresh)
      var critter = new Creature(
        window.innerWidth / 2,
        window.innerHeight / 2,
        0,
        12,
        1,
        0.5,
        16,
        0.5,
        0.085,
        0.5,
        0.3
      );
      var node = critter;
      //(parent,size,angle,range,stiffness)
      for (var i = 0; i < 3; i++) {
        var node = new Segment(node, 80, 0, 3.1416, 1);
      }
      var tentacle = new LimbSystem(node, 3, critter);
      setInterval(function() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        critter.follow(canvas.width / 2, canvas.height / 2);
      }, 33);
      ctx.beginPath();
      ctx.arc(Input.mouse.x, Input.mouse.y, 2, 0, 6.283);
      ctx.fill();
    }

    function setupTestSquid(size, legs) {
      //(x,y,angle,fAccel,fFric,fRes,fThresh,rAccel,rFric,rRes,rThresh)
      critter = new Creature(
        window.innerWidth / 2,
        window.innerHeight / 2,
        0,
        size * 10,
        size * 3,
        0.5,
        16,
        0.5,
        0.085,
        0.5,
        0.3
      );
      var legNum = legs;
      var jointNum = 32;
      for (var i = 0; i < legNum; i++) {
        var node = critter;
        var ang = Math.PI / 2 * (i / (legNum - 1) - 0.5);
        for (var ii = 0; ii < jointNum; ii++) {
          var node = new Segment(
            node,
            size * 64 / jointNum,
            ang * (ii == 0),
            3.1416,
            1.2
          );
        }
        //(end,length,speed,creature,dist)
        var leg = new LegSystem(node, jointNum, size * 30, critter);
      }
      setInterval(function() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        critter.follow(Input.mouse.x, Input.mouse.y);
      }, 33);
    }
    function setupLizard(size, legs, tail) {
      var s = size;
      //(x,y,angle,fAccel,fFric,fRes,fThresh,rAccel,rFric,rRes,rThresh)
      critter = new Creature(
        window.innerWidth / 2,
        window.innerHeight / 2,
        0,
        s * 10,
        s * 2,
        0.5,
        16,
        0.5,
        0.085,
        0.5,
        0.3
      );
      var spinal = critter;
      //(parent,size,angle,range,stiffness)
      //Neck
      for (var i = 0; i < 6; i++) {
        spinal = new Segment(spinal, s * 4, 0, 3.1415 * 2 / 3, 1.1);
        for (var ii = -1; ii <= 1; ii += 2) {
          var node = new Segment(spinal, s * 3, ii, 0.1, 2);
          for (var iii = 0; iii < 3; iii++) {
            node = new Segment(node, s * 0.1, -ii * 0.1, 0.1, 2);
          }
        }
      }
      //Torso and legs
      for (var i = 0; i < legs; i++) {
        if (i > 0) {
          //Vertebrae and ribs
          for (var ii = 0; ii < 6; ii++) {
            spinal = new Segment(spinal, s * 4, 0, 1.571, 1.5);
            for (var iii = -1; iii <= 1; iii += 2) {
              var node = new Segment(spinal, s * 3, iii * 1.571, 0.1, 1.5);
              for (var iv = 0; iv < 3; iv++) {
                node = new Segment(node, s * 3, -iii * 0.3, 0.1, 2);
              }
            }
          }
        }
        //Legs and shoulders
        for (var ii = -1; ii <= 1; ii += 2) {
          var node = new Segment(spinal, s * 12, ii * 0.785, 0, 8); //Hip
          node = new Segment(node, s * 16, -ii * 0.785, 6.28, 1); //Humerus
          node = new Segment(node, s * 16, ii * 1.571, 3.1415, 2); //Forearm
          for (
            var iii = 0;
            iii < 4;
            iii++ //fingers
          ) {
            new Segment(node, s * 4, (iii / 3 - 0.5) * 1.571, 0.1, 4);
          }
          new LegSystem(node, 3, s * 12, critter, 4);
        }
      }
      //Tail
      for (var i = 0; i < tail; i++) {
        spinal = new Segment(spinal, s * 4, 0, 3.1415 * 2 / 3, 1.1);
        for (var ii = -1; ii <= 1; ii += 2) {
          var node = new Segment(spinal, s * 3, ii, 0.1, 2);
          for (var iii = 0; iii < 3; iii++) {
            node = new Segment(node, s * 3 * (tail - i) / tail, -ii * 0.1, 0.1, 2);
          }
        }
      }
      setInterval(function() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        critter.follow(Input.mouse.x, Input.mouse.y);
      }, 33);
    }
    canvas.style.backgroundColor = "transparent";
    ctx.strokeStyle = "#00384D";
    canvas.style.zIndex = "-1";
    //- document.getElementsByClassName("glitch").style.zIndex = "20"
    //- setupSimple();//Just the very basic string
    //- setupTentacle();//Tentacle that reaches for mouse
    //- setupLizard(.5,100,128);//Literal centipede
    //- setupSquid(2,8);//Spidery thing
    const mediaQuery1 = window.matchMedia('(max-width: 750px)')
    const mediaQuery2 = window.matchMedia('(max-width: 1200px)')
      if (mediaQuery1.matches) {
        var legNum = Math.floor(5);
        setupLizard(
          //size
          2,
          legNum,
          Math.floor(4 + legNum * 8)
        );
      }
      if (mediaQuery2.matches) {
        var legNum = Math.floor(5);
        setupLizard(
          //size
          2,
          legNum,
          Math.floor(4 + legNum * 8)
        );
      }
      else{
        var legNum = Math.floor(5);
        setupLizard(
          //size
          4,
          legNum,
          Math.floor(4 + legNum * 8)
        );
      }

